#!/usr/bin/env python
from __future__ import print_function
import matplotlib.pyplot as plt
from configparser import ConfigParser
import sys
import fitsio
import numpy as np
import iminuit
import glob
import time
import scipy.interpolate as interpolate
from elf import io, utils, qso, line_models as lm, likelihood, const
from functools import partial

plt.ion()
t00 = time.time()

if len(sys.argv) != 2:
    print('usage: find_lines config.ini')
    sys.exit(0)

mode = utils.get_system_values(sys.argv[1], 'input','mode')

redshift = utils.get_z_file(sys.argv[1], mode)
add, model, noise, like, like_0, method = utils.get_fit_model(sys.argv[1])

window = float(utils.get_system_values(sys.argv[1], 'scan', 'window'))
print("INFO: window to fit: {} (Angstrom)".format(window))

line_dict = const.line_dict
t0 = time.time()

list_file = glob.glob(utils.get_system_values(sys.argv[1],'input',mode))

for i, file_to_open in enumerate(list_file[:1]):
        fits = fitsio.FITS(file_to_open)
        
        if mode == 'pix':
            length = len(fits[0][:])
        elif mode == 'spplate':
            length = len(fits[1]['z'][:])
        
        for qso_id in range(1):#length):
            sys.stdout.write('\r file %d / %d: qso %d / %d '%( i+1, len(list_file), qso_id, length))
            sys.stdout.flush()
            qso1 = qso.qso(fits, qso_id, mode)
            
            if mode == "spplate":
                mask = qso1.ivar != 0
                #plt.plot(qso1.wave[mask], qso1.flux[mask])
                z = qso1.z
            
            elif mode == 'pix':
                #plt.plot(qso1.wave, qso1.flux)
                if qso1.id not in redshift:
                    print("id w/o z, skipping")
                    continue
                z = redshift[qso1.id]
            
            for l in  const.emission_lines:
                wa, fl, iv = utils.window(z, qso1.wave, qso1.flux, qso1.ivar, l, window)
                if len(wa) < 10:
                    #print("{} not within observed range, skipping".format(l))
                    line_dict[l+'_z'].append(-1.)
                    line_dict[l+'_err'].append(-1.)
                    continue
                    
                x_node, init_pars  = utils.init_model(model, noise, wa, fl, window) 

                m,_ = utils.double_minimize(like, add, model, 
                                        wa, fl, iv, noise, 
                                        x_node, like_0, **init_pars)    
                
                """print("{}: {} = {}".format(l, str(like)[10:-19], 
                        utils.get_chi(like, add, model, 
                        m, wa, fl, iv, noise, x_node)))"""
                        
                #utils.plot_fit(wa, add, model, m, 'r', 
                        #noise = noise, x = x_node, lab = None)
                io.write_in_dict(model, line_dict, l, m, wa, x_node= x_node)
                line_dict['cat_z'].append(z) # add z catalogue

            #plt.figure()
print('time: ', time.time() - t00)
io.write_fits('new_z/xi2_double_gaus_spplate.fits', line_dict)
#plt.show()
