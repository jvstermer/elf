#!/usr/bin/env python
from __future__ import print_function
import matplotlib.pyplot as plt
from configparser import ConfigParser
import sys
import glob
import fitsio
import copy
from py.qsoemission import io, utils, qso, line_models, likelihood, const
##plt.ion()
if len(sys.argv) != 2:
    print('usage: find_lines config.ini')
    sys.exit(0)
print(sys.argv[1])
z_file = utils.get_system_values(sys.argv[1], 'input','z_file')
#print("INFO: reading z_file from {}".format(z_file))
z_dict = io.read_drq(z_file)

window = utils.get_system_values(sys.argv[1], 'chi2 scan', 'window')
window = float(window)
#print("INFO: window to fit: {} (Angstrom)".format(window))

like = utils.get_system_values(sys.argv[1], 'likelihood method', 'method')
#print("INFO: using likelihood method {}".format(like))
like = getattr(likelihood, like)

line_model = utils.get_system_values(sys.argv[1], 'line model', 'model')
#print("INFO: using line model {}".format(line_model))
line_model = getattr(line_models, line_model)

list_file = glob.glob( utils.get_system_values(sys.argv[1],'input','filename'))

for filename in list_file[3:5]:
    file_to_read = fitsio.FITS(filename)
    
    line_dict = {
        'Lya_z' : [],
        'Lya_sn' : [],
        'CIII_z' : [],
        'CIII_sn' : [],
        'CIV_z' : [],
        'CIV_sn' : [],
        'MgII_z' : [],
        'MgII_sn' : [],
    }
    
    print("INFO: reading data from {}".format(filename))
    for qso_id in range (len(file_to_read[0][:])):
        print(qso_id+1,'/',len(file_to_read[0][:]))
        qso1= qso.qso(file_to_read, qso_id)
        z = z_dict[qso1.id]
        plt.plot(qso1.wave, qso1.flux)

        #print("INFO: fitting qso with thing_id {} and redshift {}".format(qso1.id, z))
        
        #print("INFO: reduced chi squared of emission line: ")

        for l in const.emission_lines:
            wa, fl, iv = utils.window(z, qso1.wave, qso1.flux, qso1.ivar, l, window)

            if len(wa)<10:
                #print("line {} not within observed wavelength range, skipping".format(l))
                line_dict[l+'_z'].append(-1.)
                line_dict[l+'_sn'].append(-1.)
                continue
            m, fmin = utils.minimize(like, line_model, wa, fl, iv, 
                                    a=1, b=wa.mean(), c=10., d=0, e=0,pedantic = False) 
            line_dict[l+'_z'].append(m.values['b'] / const.emission_lines[l] - 1)
            if m.errors['a'] == 0:
                line_dict[l+'_sn'].append(m.values['a'])
            else:
                line_dict[l+'_sn'].append(m.values['a'] / m.errors['a'])
            
            #print("     {} is".format(l), like(*[m.values[p] for p in m.parameters], line_model = line_model, wave=wa, flux = fl, ivar = iv) ,'/', (len(wa) - len(m.parameters)))
           
            plt.plot(wa, line_model(*[m.values[p] for p in m.parameters], wave=wa),"r", lw=2)
        plt.pause(0.001)
        plt.clf()
    io.write_fits(utils.get_system_values(sys.argv[1],'output','path') + filename[25:], line_dict)
    print("INFO: done reading data from {}".format(filename))
    #plt.show()
